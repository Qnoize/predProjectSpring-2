package ru.jmentor.security;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.ComponentScan;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;@Configuration@EnableWebSecurity@EnableGlobalMethodSecurity(prePostEnabled = true)@ComponentScan(basePackages = { "ru.jmentor.controllers" })public class SecurityConfig extends WebSecurityConfigurerAdapter {    @Autowired    private UserDetailsService userDetailsService;    @Autowired    private PasswordEncoder passwordEncoder;    @Override    protected void configure(HttpSecurity httpSecurity) throws Exception {       httpSecurity               .authorizeRequests()                    .antMatchers("/admin/**").authenticated()                    .antMatchers("/userHome").authenticated()                    .anyRequest().permitAll()                    .and()               .formLogin()               .permitAll()               .usernameParameter("userName")               .loginPage("/login")               .and()               .logout()               .logoutSuccessUrl("/").permitAll();        httpSecurity                .csrf()                .disable();    }    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {        //auth.userDetailsService(userDetailsService).passwordEncoder(encoder());                auth.authenticationProvider(authProvider());    }    @Autowired    public DaoAuthenticationProvider authProvider() {        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();        authProvider.setUserDetailsService(userDetailsService);        authProvider.setPasswordEncoder(encoder());        return authProvider;    }    @Bean    public PasswordEncoder encoder() {        return new BCryptPasswordEncoder(11);    }}